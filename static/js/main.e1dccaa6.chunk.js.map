{"version":3,"sources":["Components/Chart/Helpers.tsx","Components/Chart/CanvasHelpers.ts","Constants/constants.tsx","Components/Chart/Canvas.tsx","Components/Spinner/Spinner.tsx","Hooks/fetch.tsx","Components/Chart/ChartContainer.tsx","Components/Error/Error.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["convertData","data","map","x","low","Number","high","open","close","openTime","volume","getDate","stamp","date","Date","month","getMonth","day","year","getFullYear","drawPriceTimeLine","ctx","mL","beginPath","setLineDash","moveTo","lineTo","canvas","height","strokeStyle","stroke","drawLine","mT","width","color","last","fillStyle","rect","fill","drawPriceLine","highestVal","lowestVal","numberOfLines","heightPoints","priceList","i","price","push","reverse","forEach","index","font","rightMargin","Math","trunc","toString","length","fillText","drawPriceFonts","drawTimeLine","maxTime","minTime","skippedDays","widthPoints","timeList","time","drawTimeFonts","getColor","opacity","Canvas","dataProp","bgColor","useState","candleWidth","setCandleWidth","canvasRef","useRef","useEffect","current","window","innerWidth","innerHeight","context","getContext","obj","max","o","min","maxVolume","minVolume","getChartRefPoints","heightCubicles","fillRect","accumulatedWith","candlesToIgnore","filter","bodyHeight","abs","tailHeight","prevClose","undefined","calcTopBody","tailMarginLeft","tailMarginTop","drawVolumeCandle","ref","Spinner","className","useFetchChart","isLoading","setIsLoading","React","setData","serverError","setServerError","search","useLocation","params","URLSearchParams","symbol","get","interval","newParams","append","prevMonthStamp","months","d","setMonth","setHours","calcPrevMonthsTS","axios","method","url","proxyUrl","then","res","catch","err","console","log","ChartContainer","history","Array","isArray","Error","onClick","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1dccaa6.chunk.js","sourcesContent":["export type DataObj = {\n  low: number,\n  high: number,\n  open: number,\n  close: number,\n  openTime: number,\n  volume: number\n};\n\ntype ChartRefPoints = {\n  highestVal? : number,\n  lowestVal?: number,\n  maxTime? : number,\n  minTime? : number,\n  maxVolume? : number,\n  minVolume? : number\n};\n\nexport const convertData = (data: (string | number)[][]) : Array<DataObj> => data.map((x: (string | number)[]) => ({\n  low: Number(x[3]),\n  high: Number(x[2]),\n  open: Number(x[1]),\n  close: Number(x[4]),\n  openTime: Number(x[0]),\n  volume: Number(x[5])\n}));\n\nexport const getDate = (stamp: number) : string => {\n  const date: Date = new Date(stamp);\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const year = date.getFullYear();\n  const formattedTime = `${day}/${month}/${year}`;\n  return formattedTime;\n};\n\nexport const getChartRefPoints = (data : DataObj[]) => {\n  const obj : ChartRefPoints = {};\n  obj.highestVal = Math.max(...data.map((o: DataObj) => o.high));\n  obj.lowestVal = Math.min(...data.map((o: DataObj) => o.low));\n  obj.maxTime = Math.max(...data.map((o: DataObj) => o.openTime));\n  obj.minTime = Math.min(...data.map((o: DataObj) => o.openTime));\n  obj.maxVolume = Math.max(...data.map((o: DataObj) => o.volume));\n  obj.minVolume = Math.min(...data.map((o: DataObj) => o.volume));\n  return obj;\n};\n\nexport const calcPrevMonthsTS = (months: number) => {\n  const d: Date = new Date();\n  d.setMonth(d.getMonth() - months);// timestamp of x months ago\n  d.setHours(0, 0, 0, 0);\n  return (Number(d) / 1000 | 0) * 1000;\n};\n","import { getDate } from './Helpers';\nimport { ChartRightMargin } from '../../Constants/constants';\n/*\n  To get the height necessary to push down the candle body\n  */\nexport const calcTopBody = (\n  prevClose: number,\n  open: number,\n  close: number,\n  heightCubicles: number,\n  high: number\n): number => {\n  // case : first candle\n  if (prevClose === undefined) {\n    if (open - close > 0) {\n      return (high - open) * heightCubicles;\n    }\n    return (high - close) * heightCubicles;\n  }\n  if (open - close > 0) {\n    return (high - prevClose) * heightCubicles;\n  }\n  return (high - close) * heightCubicles;\n};\n\n/* Draws the candles */\n\nexport const drawCandle = (\n  ctx: any,\n  mL: number,\n  mT: number,\n  width: number,\n  height: number,\n  color: string\n): void => {\n  ctx.fillStyle = color;\n  ctx.beginPath();\n  // margin left, margin top, width, height\n  ctx.rect(mL, mT, width, height);\n  ctx.fill();\n};\n/* Draws the lines */\n\nconst drawPriceTimeLine = (ctx: any, mL: number) => {\n  ctx.beginPath();\n  ctx.setLineDash([5]);\n  ctx.moveTo(mL, 0);\n  ctx.lineTo(mL, ctx.canvas.height);\n  ctx.strokeStyle = 'white';\n  ctx.stroke();\n};\n\nexport const drawLine = (\n  ctx: any,\n  mL: number,\n  mT?: number,\n  width?: number,\n  height?: number,\n  color?: string,\n  last: boolean = false\n): void => {\n  ctx.fillStyle = color;\n  ctx.beginPath();\n  ctx.rect(mL, mT, width, height);\n  ctx.fill();\n\n  // Exceptional case - draws the current time line\n  if (last) {\n    drawPriceTimeLine(ctx, mL);\n  }\n};\n\n/* Draws the prices fonts */\n\nconst drawPriceFonts = (priceList: Array<number>, ctx: any, heightPoints: number): void => {\n  priceList.forEach((i: number, index: number) => {\n    ctx.font = '11px Arial';\n    ctx.fillStyle = 'orange';\n    const price: string = Math.trunc(i).toString();\n    let rightMargin: number;\n\n    if (price.length === 5) {\n      rightMargin = ctx.canvas.width - 35;\n    } else if (price.length === 4) {\n      rightMargin = ctx.canvas.width - 29;\n    } else if (price.length === 3) {\n      rightMargin = ctx.canvas.width - 24;\n    } else if (price.length === 2) {\n      rightMargin = ctx.canvas.width - 23;\n    } else if (price.length === 6) {\n      rightMargin = ctx.canvas.width - 40;\n    } else {\n      rightMargin = ctx.canvas.width - 15;\n    }\n\n    if (index === 0) {\n      ctx.fillText(price, rightMargin, (heightPoints * index) + 12);\n    } else {\n      ctx.fillText(price, rightMargin, (heightPoints * index) - 5);\n    }\n  });\n};\n\n/* Draws the horizontal price lines */\n\nexport const drawPriceLine = (ctx: any, highestVal: number, lowestVal: number, numberOfLines: number): void => {\n  const heightPoints: number = ctx.canvas.height / (numberOfLines + 1);\n  const priceList: Array<number> = [];\n  // Draws the lines\n  for (let i: number = 0; i <= numberOfLines + 1; i++) {\n    const price: number = (lowestVal) + ((heightPoints * i) * ((highestVal - lowestVal) / ctx.canvas.height));\n    priceList.push(price);\n    // console.log(\"price[\" + i + \"] \" + (minLow + (prices * i)))\n    ctx.beginPath();\n    ctx.moveTo(0, (heightPoints * i));\n    ctx.lineTo(ctx.canvas.width, (heightPoints * i));\n    ctx.strokeStyle = 'yellow';\n    ctx.stroke();\n  }\n\n  priceList.reverse();\n  drawPriceFonts(priceList, ctx, heightPoints);\n};\n\n/* Draws the time fonts */\nexport const drawTimeFonts = (timeList: Array<number>, ctx: any, widthPoints: number, skippedDays: number): void => {\n  timeList.forEach((i: number, index: number) => {\n    ctx.font = '11px Arial';\n    ctx.fillStyle = 'orange';\n    const time: number = i;\n\n    if (index !== timeList.length - 1) {\n      // time + delay of X days based on the right margin\n      ctx.fillText(getDate(time + (skippedDays * 86400 * 1000)), (widthPoints * index) + 5, ctx.canvas.height - 4);\n    } else if (index === timeList.length - 1) {\n      ctx.fillText(getDate(time), ((widthPoints * index) - ChartRightMargin), ctx.canvas.height - 20);\n    }\n  });\n};\n\n/* Draws the vertical time lines */\nexport const drawTimeLine = (ctx: any, maxTime: number, minTime: number, numberOfLines: number, skippedDays: number): void => {\n  const widthPoints: number = ctx.canvas.width / (numberOfLines + 1);\n  const timeList: Array<number> = [];\n\n  // Draws the lines\n  for (let i = 0; i <= numberOfLines + 1; i++) {\n    const time: number = (minTime) + ((widthPoints * i) * ((maxTime - minTime) / ctx.canvas.width));\n    timeList.push(time);\n    ctx.beginPath();\n    ctx.moveTo((widthPoints * i), 0);\n    ctx.lineTo((widthPoints * i), ctx.canvas.height);\n    ctx.strokeStyle = 'yellow';\n    ctx.stroke();\n  }\n\n  // Draws the time fonts\n  drawTimeFonts(timeList, ctx, widthPoints, skippedDays);\n};\n\n/*\nGets the candle color\n*/\nexport const getColor = (open: number, close: number, opacity?: number): string => {\n  if (open - close > 0) {\n    return opacity ? `rgb(255,0,0,${opacity.toString()})` : 'rgb(255,0,0)';\n  }\n  return opacity ? `rgb(0,255,0,${opacity.toString()})` : 'rgb(0,255,0)';\n};\n\n/* Draw volume candle */\nexport const drawVolumeCandle = (ctx: any, accumulatedWith: number, open: number, close: number, volume: number, maxVolume: number, candleWidth: number, height?: number): void => {\n  ctx.fillStyle = getColor(open, close, 0.15);\n  ctx.beginPath();\n  ctx.rect(accumulatedWith, height ? height * (0.9 - ((volume * 0.1) / maxVolume)) : 0, candleWidth, height ? height * (0.1 + ((volume * 0.1) / maxVolume)) : 0);\n  ctx.fill();\n};\n","// Fetch Constants\nexport const binanceApi = 'https://api.binance.com/api/v3/klines';\nexport const corsProxy = 'https://vast-oasis-30871.herokuapp.com/';\n\n// Chart Constants\nexport const ChartRightMargin: number = 53;\nexport const horizontalPriceLines: number = 13;\nexport const verticalPriceLines: number = 3;\n","import React, { useRef, useEffect, useState } from 'react';\nimport {\n  calcTopBody, drawCandle, drawLine, drawPriceLine, getColor, drawTimeLine, drawVolumeCandle\n} from './CanvasHelpers';\nimport { ChartRightMargin, horizontalPriceLines, verticalPriceLines } from '../../Constants/constants';\nimport { getChartRefPoints, DataObj } from './Helpers';\n\ninterface IProps {\n  dataProp: Array<DataObj>,\n  bgColor?: string\n}\n\nconst Canvas: React.FC<IProps> = function ({ dataProp, bgColor = 'black' }: IProps) {\n  const [data] = useState<Array<DataObj>>(dataProp);\n  const [candleWidth, setCandleWidth] = useState<number>();\n\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas: HTMLCanvasElement = canvasRef.current!;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    if (data && data.length !== 0) {\n      setCandleWidth(canvas.width / data.length);\n    }\n  }, [data, canvasRef]);\n\n  useEffect(() => {\n    const canvas: HTMLCanvasElement = canvasRef.current!;\n    const context: CanvasRenderingContext2D = canvas.getContext('2d')!;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    const {\n      // eslint-disable-next-line no-unused-vars\n      highestVal, lowestVal, maxTime, minTime, maxVolume, minVolume\n    } = getChartRefPoints(data);\n\n    /*\n    The size of each unit of height\n    To get sized based on   (price1-price2)*heightCubicles\n    */\n    const heightCubicles: number = highestVal && lowestVal ? context.canvas.height / (highestVal - lowestVal) : 0; // each price unit equals to unit * heightcubicles in canvas scale\n    // eslint-disable-next-line no-unused-vars\n    const widthCubciles: number = maxTime && minTime ? context.canvas.width / (maxTime - minTime) : 0;\n    context.fillStyle = bgColor;\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n\n    // Width is accumulated to distribute the candles horizontally\n    let accumulatedWith: number = 0;\n\n    /* Draw horizontal lines */\n    if (data && highestVal && lowestVal) drawPriceLine(context, highestVal, lowestVal, horizontalPriceLines);\n\n    let candlesToIgnore: number = 0;\n    if (candleWidth) candlesToIgnore = ChartRightMargin / candleWidth;\n\n    /* Draw timestamp lines */\n    if (maxTime && minTime) drawTimeLine(context, maxTime, minTime, verticalPriceLines, candlesToIgnore);\n\n    // Draw the candles\n    data && data.length > 0 && data.filter((i, index) => index >= candlesToIgnore).forEach((i: DataObj, index: number) => {\n      // Width is accumulated only after the first candle has been drawn\n      if (index > 0 && candleWidth) {\n        accumulatedWith += candleWidth;\n      }\n      if (candleWidth && highestVal) {\n        const bodyHeight: number = Math.abs((i.open - i.close) * heightCubicles);\n        const tailHeight: number = (i.high - i.low) * heightCubicles;\n        /* To draw the body of the candle */\n        drawCandle(\n          context,\n          accumulatedWith,\n          calcTopBody(\n            data[index - (candlesToIgnore + 1)]?.close,\n            i.open,\n            i.close,\n            heightCubicles,\n            highestVal\n          ),\n          candleWidth,\n          bodyHeight,\n          getColor(i.open, i.close)\n        );\n\n        /* To draw the tail of the candle */\n        const tailMarginLeft: number = accumulatedWith + (candleWidth / 2);\n        const tailMarginTop: number = (highestVal - i.high) * heightCubicles;\n        drawLine(context, tailMarginLeft, tailMarginTop, 1, tailHeight, getColor(i.open, i.close));\n        /* draw the current price line */\n        if (index === data.filter((i, index) => index >= candlesToIgnore).length - 1) drawLine(context, tailMarginLeft, 0, 0, 0, '', true);\n        /* Draw volume candles */\n        if (maxVolume) drawVolumeCandle(context, accumulatedWith, i.open, i.close, i.volume, maxVolume, candleWidth, canvas.height);\n      }\n    });\n  }, [candleWidth, data, bgColor]);\n\n  return <canvas ref={canvasRef} />;\n};\nexport default Canvas;\n","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner: React.FC = function () {\n  return (\n    <div className=\"center\">\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n      <div className=\"wave\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { binanceApi, corsProxy } from '../Constants/constants';\nimport { calcPrevMonthsTS } from '../Components/Chart/Helpers';\nimport { useLocation } from 'react-router-dom';\n\nexport const useFetchChart = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [data, setData] = React.useState<unknown>([]);\n  const [serverError, setServerError] = useState(null);\n  const { search } = useLocation();\n  useEffect(() => {\n    const params = new URLSearchParams(search);\n    const symbol: string = params.get('symbol') || 'BTCUSDT';\n    const interval: string = params.get('interval') || '1d';\n    const url: string = binanceApi;\n    const newParams = new URLSearchParams();\n    newParams.append('symbol', symbol);\n    newParams.append('interval', interval);\n    const proxyUrl: string = corsProxy;\n    const prevMonthStamp: number = calcPrevMonthsTS(20);\n\n    setIsLoading(true);\n    axios({\n      method: 'get',\n      url: proxyUrl + url + `?${newParams}`\n    }).then((res) => {\n      setData(res.data.filter((i: number[]) => i[0] >= prevMonthStamp));\n      setIsLoading(false);\n    }).catch((err) => {\n      setServerError(err);\n      console.log(err);\n      setIsLoading(false);\n    });\n  }, []);\n\n  return { isLoading, data, serverError };\n};\n","\nimport React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport Canvas from './Canvas';\nimport { convertData } from './Helpers';\nimport Spinner from '../Spinner/Spinner';\nimport { useFetchChart } from '../../Hooks/fetch';\n\nconst ChartContainer: React.FC<RouteComponentProps> = ({ history }) => {\n  const { data, serverError } = useFetchChart();\n\n  if (serverError) {\n    history.push('/error');\n  }\n\n  if (Array.isArray(data) && data?.length > 0) {\n    return (\n      <Canvas dataProp={convertData(data)} />\n    );\n  }\n  return <Spinner />;\n};\nexport default ChartContainer;\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\n\nconst Error: React.FC<RouteComponentProps> = ({ history }) => {\n  return (\n    <>\n      <p>Error loading the site</p>\n      <button onClick={() => history.push('/')}>Go back</button>\n    </>\n  );\n};\n\nexport default Error;\n","import React from 'react';\nimport ChartContainer from './Components/Chart/ChartContainer';\nimport Error from './Components/Error/Error';\nimport './App.css';\nimport { Switch, Route } from 'react-router';\n\nconst App: React.FC = function () {\n  return (\n    <Switch>\n      <Route path=\"/chartera\" component={ChartContainer} exact />\n      <Route path=\"/error\" component={Error} />\n    </Switch>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}